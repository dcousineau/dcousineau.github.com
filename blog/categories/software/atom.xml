<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software | Tower of Power]]></title>
  <link href="http://dcousineau.github.com/blog/categories/software/atom.xml" rel="self"/>
  <link href="http://dcousineau.github.com/"/>
  <updated>2013-09-03T11:14:42-05:00</updated>
  <id>http://dcousineau.github.com/</id>
  <author>
    <name><![CDATA[Daniel Cousineau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Lesson In Good Architecture]]></title>
    <link href="http://dcousineau.github.com/blog/2011/01/29/a-lesson-in-good-architecture/"/>
    <updated>2011-01-29T07:58:56-06:00</updated>
    <id>http://dcousineau.github.com/blog/2011/01/29/a-lesson-in-good-architecture</id>
    <content type="html"><![CDATA[<p>We recently began working on our biggest event for our biggest client. In the process of getting everything up and running before the event started, we noticed a show-stopper bug appear out of nowhere.</p>

<p>Our media processor when finished converting videos and creating thumbnails of images publishes said files to our CDN. Only a few hours before our event and our CDN was failing probably 80% of the SSL handshakes for our requests to publish files. There is no need to name names as it was a difficult and obscure bug to diagnose in an extremely short amount of time. We needed to get it working, our CDN provider wasn't going to be able to resolve the problem in the extremely short timeframe we required, so the decision was clear: we needed to switch providers for the new content.</p>

<p>Normally this is a 2 week job, switching API calls, testing, finding all the occurrences (we process both videos and photos in different styles of batches), etc. We were able to complete it and have it live in under 1.5 hours. Why? We (and really I mean my coworker as this decision was made before I came on) made som really damned good architecture decisions. Primarly:</p>

<ol>
<li><p>We used OSS, primarily <a href="">Zend Framework</a> which had well written API libraries for our new CDN</p></li>
<li><p>All file system operations were abstracted to adapters that all inherited a "FileStore" base class</p></li>
</ol>


<p>So, create a file store for our new CDN using the well written, off the shelf API. Change 4 lines of XML configuration, deploy, and we were in business.</p>

<p>Had my coworker succumbed to laziness or listen to some people who claim "oh you're just making it too complicated" or "just get it up quickly, damn the design decisions" we would have been sunk. Instead he took the time to utilize the adapter pattern (even though it probably added an extra 2 days to his total coding time) despite all signs pointing to us never needing to switch CDN's (and certainly not within a 2 hour timeframe).</p>

<p>So let this be a lesson to us all. Abstraction and design patterns sometimes feel like an "enterprisey overcomplication" but they aren't there for everyday needs. They exist for those days when a service provider gets hit by an obscure bug and you have to swap out a component under extreme time schedules. So suck it up, use them, and thank yourself when you find yourself in such a situation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plesk open_basedir Workaround]]></title>
    <link href="http://dcousineau.github.com/blog/2008/02/01/plesk-open_basedir-workaround/"/>
    <updated>2008-02-01T19:47:41-06:00</updated>
    <id>http://dcousineau.github.com/blog/2008/02/01/plesk-open_basedir-workaround</id>
    <content type="html"><![CDATA[<p>Unfortunately, Plesk does (and according to atomicturtle will continue to) hate on developers by enabling open_basedir by default and not give any way to change such behavior.</p>

<p>A work around is possible, overriding the setting in a vhost.conf file (httpd.include files are not so good because Plesk rewrites them every time a change is made to a domain's settings, or whenever Plesk feels like it). However, adding the line <code>php_admin_value open_basedir none</code> is completely ineffective (as I would assume the vhost.conf is being included before offending open_basedir changes are made?).</p>

<p>However I found that doing this (those familiar with Plesk's httpd.include will recognize this block):</p>

<p>```apache
<Directory /path/to/domain/httpdocs></p>

<pre><code>&lt;IfModule sapi_apache2.c&gt;
    php_admin_value open_basedir none
&lt;/IfModule&gt;
&lt;IfModule mod_php5.c&gt;
    php_admin_value open_basedir none
&lt;/IfModule&gt;
</code></pre>

<p></Directory>
```</p>

<p>Guarantees that open_basedir will plague you no more.</p>

<p>Some may ask why I want open_basedir enabled, it's leaving me open to vulnerabilities! Some applications have a control panel on a separate sub domain and require the ability to write files to it's parent domain, something Plesk beats down with an ugly stick, as well as some applications requiring access to the system wide PEAR libraries, something open_basedir ironicaly beats down as well (despite the system wide PEAR libraries being included in the include_path directive).</p>

<p>Later I'll be digging through Plesk's ability to trigger commands on updates and domain creations to automate this vhost.conf setting (namely grabbing that path to the httpdocs folder that is so critical and time consuming).</p>

<p><strong>EDIT:</strong> To apply the changes, follow markus' example:</p>

<blockquote><p>I just have my setting in the vhost.conf, and it works just fine. Just remember to update Plesks settings manually afterwards, with <code>/usr/local/psa/admin/sbin/websrvmng -u –vhost-name=example.com</code> (it doesn’t read directly from the vhost.conf).</p></blockquote>
]]></content>
  </entry>
  
</feed>
